<?php

namespace mindplay\composer_locator;

use Composer\Composer;
use Composer\IO\IOInterface;
use Composer\Plugin\PluginInterface;
use RuntimeException;
use Symfony\Component\Filesystem\Filesystem;

class Plugin implements PluginInterface
{
    public function activate(Composer $composer, IOInterface $io)
    {
        $dump_package_map = function () use ($composer, $io) {
            $io->write("<info>Dumping package paths</info>");

            $manager = $composer->getInstallationManager();

            $root_package = $composer->getPackage();

            $paths = [];

            if ($root_package->getName() !== '__root__') {
                $paths[$root_package->getName()] = getcwd();
            }

            $packages = $composer->getRepositoryManager()->getLocalRepository()->getPackages();

            foreach ($packages as $package) {
                $name = $package->getName();

                $paths[$name] = $manager->getInstallPath($package);

                if ($name === "mindplay/composer-locator") {
                    $output_path = $manager->getInstallPath($package) . DIRECTORY_SEPARATOR . "composer_path.func.php";
                }
            }

            if (isset($output_path)) {
                $date = date('Y-m-d H:i:s');
                $content = <<<TEMP
                    <?php
                    # FILE GENERATED by mindplay/composer-locator @ $date
                    
                    /**
                     * @param string \$name Composer vendor/package name
                     * @return string absolute root path to package installation folder
                     * 
                     * @throws RuntimeException if the specific package is not installed
                     */
                    function composer_path(\$name) {
                        static \$paths = var_export(\$paths, true);
                        
                        \$name = strtolower(\$name);
                        
                        if (!isset(\$paths[\$name])) {
                            throw new RuntimeException('Composer package not found: ' . \$name);
                        }
                        
                        return \$paths[\$name];
                    }
                    
TEMP;

                $fs = new Filesystem();

                $fs->dumpFile($output_path, $content);

                $io->write("<info>" . count($packages) . " package paths dumped</info>");
            } else {
                throw new RuntimeException("ouch");
            }
        };

        $composer->getEventDispatcher()->addListener("post-install-cmd", $dump_package_map);
        $composer->getEventDispatcher()->addListener("post-update-cmd", $dump_package_map);
    }
}
